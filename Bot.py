import logging
import subprocess
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext

API_TOKEN = "" # –¢–æ–∫–µ–Ω –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
SERVICE_NAME = "pzserver.service" # –ò–º—è —Å–ª—É–∂–±—ã —Å–µ—Ä–≤–µ—Ä–∞
ADMIN_CHAT_ID =  # –ß–∞—Ç –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –±–æ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–æ–º.


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

def main_menu_keyboard():
    return InlineKeyboardMarkup([ 
        [
            InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data='start'),
            InlineKeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å", callback_data='stop'),
        ],
        [
            InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data='restart'),
            InlineKeyboardButton("–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data='status'),
        ]
    ])

def back_button_keyboard():
    return InlineKeyboardMarkup([ 
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ])

async def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text('–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º', reply_markup=main_menu_keyboard())

async def control_server(action: str):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ systemctl"""
    try:
        subprocess.run(f"sudo systemctl {action} {SERVICE_NAME}", shell=True, check=True)
        return {
            "start": "–°–µ—Ä–≤–µ—Ä PZ –∑–∞–ø—É—â–µ–Ω.",
            "stop": "–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            "restart": "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω."
        }.get(action, "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except subprocess.CalledProcessError:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {action}."

async def status_server():
    """–°—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã"""
    try:
        result = subprocess.run(f"systemctl is-active {SERVICE_NAME}", shell=True, check=True, stdout=subprocess.PIPE)
        status = result.stdout.decode('utf-8').strip()
        return "üü¢ –°–µ—Ä–≤–µ—Ä PZ –∞–∫—Ç–∏–≤–µ–Ω." if status == "active" else f"–°–µ—Ä–≤–µ—Ä {status}."
    except subprocess.CalledProcessError:
        return "üî¥ –°–µ—Ä–≤–µ—Ä PZ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."

async def notify_admin(user, action, context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    message = (
        f"#–õ–æ–≥_PZServer\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (ID: {user.id})\n"
        f"üîò –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
        f"üïí –í—Ä–µ–º—è: {now}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

async def button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    action = query.data
    user = query.from_user

    
    if action != 'back':
        await notify_admin(user, action, context)

    if action == 'start':
        response = await control_server("start")
        markup = back_button_keyboard()
    elif action == 'stop':
        response = await control_server("stop")
        markup = back_button_keyboard()
    elif action == 'restart':
        response = await control_server("restart")
        markup = back_button_keyboard()
    elif action == 'status':
        response = await status_server()
        markup = back_button_keyboard()
    elif action == 'back':
        response = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"
        markup = main_menu_keyboard()
    else:
        response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        markup = main_menu_keyboard()

    await query.answer()
    await query.edit_message_text(text=response, reply_markup=markup)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(API_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    await application.run_polling()

if __name__ == '__main__':
    
    application = Application.builder().token(API_TOKEN).build()

    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    
    application.run_polling()
